# =============================================================================
# Expo MCP Server - Docker Compose Configuration
# マルチアーキテクチャ & セキュリティ強化 & 署名検証対応
# =============================================================================

version: "3.8"

# ネットワーク定義
networks:
  expo-mcp-network:
    driver: bridge
    name: expo-mcp-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ボリューム定義
volumes:
  redis_data:
    name: expo-mcp-redis-data
    driver: local
  typesense_data:
    name: expo-mcp-typesense-data
    driver: local
  app_cache:
    name: expo-mcp-app-cache
    driver: local
  local_data:
    name: expo-mcp-local-data
    driver: local
  prometheus_data:
    name: expo-mcp-prometheus-data
    driver: local
  grafana_data:
    name: expo-mcp-grafana-data
    driver: local
  alertmanager_data:
    name: expo-mcp-alertmanager-data
    driver: local

# 共通設定
x-common-variables: &common-variables
  TZ: UTC
  DOCKER_CONTENT_TRUST: 1

x-security-opt: &security-opt
  security_opt:
    - no-new-privileges:true
    - seccomp:unconfined
  cap_drop:
    - ALL

x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  # =============================================================================
  # Expo MCP API サーバー - マルチアーキテクチャ対応
  # =============================================================================
  expo-mcp-api:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
      platforms:
        - linux/amd64
        - linux/arm64
      cache_from:
        - expo-mcp-server:cache
      labels:
        - "org.opencontainers.image.title=Expo MCP Server"
        - "org.opencontainers.image.version=1.0.0"
        - "security.scan=enabled"
        - "security.signature=required"
    
    image: expo-mcp-server:latest
    container_name: expo-mcp-server
    hostname: expo-mcp-api
    restart: unless-stopped
    
    # セキュリティ設定強化
    <<: *security-opt
    read_only: true
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    user: "1001:1001"
    
    # 環境変数
    environment:
      <<: *common-variables
      NODE_ENV: production
      MCP_MODE: http
      LOG_LEVEL: info
      LOCAL_STORAGE_PATH: /app/data
      MAX_STORAGE_SIZE_GB: 10
      REDIS_URL: redis://redis-cache:6379
      TYPESENSE_URL: http://typesense-search:8108
      TYPESENSE_API_KEY: xyz
      MONITORING_ENABLED: true
      METRICS_PORT: 9090
      # セキュリティ設定
      SECURITY_ENABLED: true
      RATE_LIMIT_ENABLED: true
      INPUT_VALIDATION_STRICT: true
      AUDIT_LOGGING_ENABLED: true
    
    # ボリュームマウント
    volumes:
      - ./data:/app/data:rw,nodev,nosuid
      - app_cache:/app/cache:rw,nodev,nosuid
      - local_data:/app/logs:rw,nodev,nosuid
      # 読み取り専用ファイルシステムのため、tmpディレクトリを作成
      - /tmp
    
    # ポート公開（HTTP フォールバック用）
    ports:
      - "3000:3000"
      - "9090:9090"  # Prometheusメトリクス
    
    # ネットワーク
    networks:
      expo-mcp-network:
        ipv4_address: 172.20.0.10
    
    # ヘルスチェック
    healthcheck:
      test: ["CMD", "node", "health-check.cjs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # 依存関係
    depends_on:
      redis-cache:
        condition: service_healthy
      typesense-search:
        condition: service_started
    
    # リソース制限
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    # ログ設定
    <<: *logging

  # =============================================================================
  # Redis キャッシュサーバー
  # =============================================================================
  redis-cache:
    image: redis:7-alpine
    container_name: expo-mcp-redis
    restart: unless-stopped
    
    # セキュリティ設定
    security_opt:
      - no-new-privileges:true
    read_only: true
    
    # Redis設定
    command: >
      redis-server
      --save 60 1
      --loglevel warning
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    
    # ボリュームマウント
    volumes:
      - redis_data:/data:rw
      - /tmp
    
    # ネットワーク
    networks:
      - expo-mcp-network
    
    # ヘルスチェック
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
    
    # リソース制限
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # =============================================================================
  # Typesense 検索エンジン
  # =============================================================================
  typesense-search:
    image: typesense/typesense:0.25.1
    container_name: expo-mcp-typesense
    restart: unless-stopped
    
    # セキュリティ設定
    security_opt:
      - no-new-privileges:true
    
    # Typesense設定
    environment:
      - TYPESENSE_DATA_DIR=/data
      - TYPESENSE_API_KEY=xyz
      - TYPESENSE_CORS_DOMAINS=*
      - TYPESENSE_ENABLE_CORS=true
    
    # ボリュームマウント
    volumes:
      - typesense_data:/data:rw
    
    # ポート公開
    ports:
      - "8108:8108"
    
    # ネットワーク
    networks:
      - expo-mcp-network
    
    # ヘルスチェック (開発時は無効化)
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8108/health"]
    #   interval: 15s
    #   timeout: 5s
    #   retries: 3
    
    # リソース制限
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    command: '--data-dir /data --api-key=xyz --listen-port 8108 --enable-cors'

  # 新規: Prometheus監視サーバー
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: expo-mcp-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - expo-mcp-network
    depends_on:
      - expo-mcp-api

  # 新規: Grafana可視化ダッシュボード
  grafana:
    image: grafana/grafana:10.0.0
    container_name: expo-mcp-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - expo-mcp-network
    depends_on:
      - prometheus

  # 新規: Alertmanager通知管理
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: expo-mcp-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - expo-mcp-network

networks:
  expo-mcp-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  typesense_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local 