import { ExpoTools } from '../src/mcp/tools';

describe('ExpoTools', () => {
  
  describe('expo_read_document', () => {
    it('should read document with valid URL', async () => {
      const result = await ExpoTools.expo_read_document({
        url: 'https://docs.expo.dev/get-started',
        doc_type: 'guide',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].type).toBe('text');
      expect(result.content[0].text).toContain('# Document:');
      expect(result.isError).toBeUndefined();
    });

    it('should handle invalid URL', async () => {
      const result = await ExpoTools.expo_read_document({
        url: 'invalid-url',
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
      expect(result.content[0].text).toContain('expo_read_document');
    });

    it('should require URL parameter', async () => {
      const result = await ExpoTools.expo_read_document({});

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });
  });

  describe('expo_search_documents', () => {
    it('should search documents with query', async () => {
      const result = await ExpoTools.expo_search_documents({
        query: 'camera permissions',
        filters: {
          category: ['api', 'docs'],
          platform: ['ios', 'android'],
        },
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('# Search Results');
      expect(result.content[0].text).toContain('camera permissions');
      expect(result.isError).toBeUndefined();
    });

    it('should handle empty query', async () => {
      const result = await ExpoTools.expo_search_documents({
        query: '',
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });

    it('should handle long query', async () => {
      const longQuery = 'a'.repeat(1000);
      const result = await ExpoTools.expo_search_documents({
        query: longQuery,
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });
  });

  describe('expo_recommend', () => {
    it('should provide recommendations based on context', async () => {
      const result = await ExpoTools.expo_recommend({
        context: 'I want to add camera functionality to my app',
        max_results: 3,
        platform: 'ios',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('# Recommendations');
      expect(result.content[0].text).toContain('camera functionality');
      expect(result.isError).toBeUndefined();
    });

    it('should handle empty context', async () => {
      const result = await ExpoTools.expo_recommend({
        context: '',
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });

    it('should respect max_results constraint', async () => {
      const result = await ExpoTools.expo_recommend({
        context: 'testing',
        max_results: 15, // exceeds maximum
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });
  });

  describe('expo_get_sdk_module', () => {
    it('should get SDK module information', async () => {
      const result = await ExpoTools.expo_get_sdk_module({
        module_name: 'camera',
        sdk_version: 'latest',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('# camera (expo-camera)');
      expect(result.content[0].text).toContain('📱 Platform Compatibility');
      expect(result.content[0].text).toContain('📊 互換性サマリー');
      expect(result.content[0].text).toContain('Generated by Expo MCP Server');
      expect(result.isError).toBeUndefined();
    });

    it('should handle invalid module name', async () => {
      const result = await ExpoTools.expo_get_sdk_module({
        module_name: 'invalid-module!@#',
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });

    it('should require module_name parameter', async () => {
      const result = await ExpoTools.expo_get_sdk_module({});

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });
  });

  describe('expo_config_templates', () => {
    it('should generate app.json template', async () => {
      const result = await ExpoTools.expo_config_templates({
        template_type: 'app.json',
        project_context: {
          name: 'TestApp',
          platforms: ['ios', 'android'],
        },
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('# app.json Configuration Template');
      expect(result.content[0].text).toContain('```json');
      expect(result.isError).toBeUndefined();
    });

    it('should generate eas.json template', async () => {
      const result = await ExpoTools.expo_config_templates({
        template_type: 'eas.json',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('# eas.json Configuration Template');
      expect(result.isError).toBeUndefined();
    });

    it('should handle invalid template type', async () => {
      const result = await ExpoTools.expo_config_templates({
        template_type: 'invalid.json' as any,
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });
  });

  describe('expo_eas_command_builder', () => {
    it('should build EAS build command', async () => {
      const result = await ExpoTools.expo_eas_command_builder({
        operation: 'build',
        platform: 'ios',
        profile: 'production',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('eas build');
      expect(result.content[0].text).toContain('--platform ios');
      expect(result.content[0].text).toContain('production');
      expect(result.isError).toBeUndefined();
    });

    it('should build EAS submit command', async () => {
      const result = await ExpoTools.expo_eas_command_builder({
        operation: 'submit',
        platform: 'all',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('eas submit');
      expect(result.content[0].text).toContain('--platform all');
      expect(result.isError).toBeUndefined();
    });

    it('should handle invalid operation', async () => {
      const result = await ExpoTools.expo_eas_command_builder({
        operation: 'invalid' as any,
        platform: 'ios',
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });
  });

  describe('expo_code_examples', () => {
    it('should generate TypeScript code examples', async () => {
      const result = await ExpoTools.expo_code_examples({
        pattern: 'Camera',
        language: 'typescript',
        platform: 'universal',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('# Code Examples');
      expect(result.content[0].text).toContain('Camera');
      expect(result.content[0].text).toContain('typescript');
      expect(result.isError).toBeUndefined();
    });

    it('should generate JavaScript code examples', async () => {
      const result = await ExpoTools.expo_code_examples({
        pattern: 'Location',
        language: 'javascript',
        platform: 'ios',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('Location');
      expect(result.content[0].text).toContain('javascript');
      expect(result.isError).toBeUndefined();
    });

    it('should handle invalid pattern length', async () => {
      const result = await ExpoTools.expo_code_examples({
        pattern: 'a'.repeat(200), // exceeds maximum
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });
  });

  describe('expo_error_diagnosis', () => {
    it('should diagnose build errors', async () => {
      const result = await ExpoTools.expo_error_diagnosis({
        error_message: 'Module not found: expo-camera',
        error_type: 'build',
        platform: 'ios',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('# Error Diagnosis');
      expect(result.content[0].text).toContain('expo-camera');
      expect(result.content[0].text).toContain('build');
      expect(result.isError).toBeUndefined();
    });

    it('should diagnose runtime errors', async () => {
      const result = await ExpoTools.expo_error_diagnosis({
        error_message: 'Cannot read property of undefined',
        error_type: 'runtime',
      });

      expect(result).toBeDefined();
      expect(result.content).toHaveLength(1);
      expect(result.content[0].text).toContain('runtime');
      expect(result.isError).toBeUndefined();
    });

    it('should handle empty error message', async () => {
      const result = await ExpoTools.expo_error_diagnosis({
        error_message: '',
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });

    it('should handle long error message', async () => {
      const result = await ExpoTools.expo_error_diagnosis({
        error_message: 'a'.repeat(3000), // exceeds maximum
      });

      expect(result).toBeDefined();
      expect(result.isError).toBe(true);
    });
  });
}); 