#!/bin/bash
# =============================================================================
# Docker Security Scan Script for Expo MCP Server
# =============================================================================

set -e

echo "üîê Starting Docker Security Scan..."

IMAGE_NAME="${1:-expo-mcp-server}"
SCAN_REPORT_DIR="./docker/security-reports"

# „É¨„Éù„Éº„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
mkdir -p "${SCAN_REPORT_DIR}"

echo "üìã Scanning image: ${IMAGE_NAME}"

# 1. Docker Scout (if available)
if command -v docker &> /dev/null; then
    echo "üîç Running Docker Scout security scan..."
    
    # Docker Scout „ÅßCVE „Çπ„Ç≠„É£„É≥
    if docker scout --help &> /dev/null 2>&1; then
        docker scout cves "${IMAGE_NAME}" > "${SCAN_REPORT_DIR}/docker-scout-cves.txt" || echo "‚ö†Ô∏è  Docker Scout CVE scan failed"
        docker scout recommendations "${IMAGE_NAME}" > "${SCAN_REPORT_DIR}/docker-scout-recommendations.txt" || echo "‚ö†Ô∏è  Docker Scout recommendations failed"
    else
        echo "‚ÑπÔ∏è  Docker Scout not available, skipping..."
    fi
fi

# 2. Trivy (if available)
if command -v trivy &> /dev/null; then
    echo "üîç Running Trivy security scan..."
    trivy image --format table "${IMAGE_NAME}" > "${SCAN_REPORT_DIR}/trivy-scan.txt" || echo "‚ö†Ô∏è  Trivy scan failed"
    trivy image --format json "${IMAGE_NAME}" > "${SCAN_REPORT_DIR}/trivy-scan.json" || echo "‚ö†Ô∏è  Trivy JSON report failed"
else
    echo "‚ÑπÔ∏è  Trivy not available, skipping..."
fi

# 3. Docker Bench Security (Âü∫Êú¨ÁöÑ„Å™„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ)
echo "üîç Running basic security checks..."

# „Ç§„É°„Éº„Ç∏ÊÉÖÂ†±ÂèéÈõÜ
docker inspect "${IMAGE_NAME}" > "${SCAN_REPORT_DIR}/image-inspect.json" 2>/dev/null || echo "‚ö†Ô∏è  Image inspection failed"

# „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆöÁ¢∫Ë™ç
echo "üìã Security Configuration Check:" > "${SCAN_REPORT_DIR}/security-check.txt"
echo "=================================" >> "${SCAN_REPORT_DIR}/security-check.txt"

# Èùûroot„É¶„Éº„Ç∂„ÉºÁ¢∫Ë™ç
USER_CHECK=$(docker inspect "${IMAGE_NAME}" | grep -i '"User"' || echo "User: not set")
echo "User Setting: ${USER_CHECK}" >> "${SCAN_REPORT_DIR}/security-check.txt"

# DockerfileÂÆâÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
if [ -f "Dockerfile" ]; then
    echo "" >> "${SCAN_REPORT_DIR}/security-check.txt"
    echo "Dockerfile Security Analysis:" >> "${SCAN_REPORT_DIR}/security-check.txt"
    echo "----------------------------" >> "${SCAN_REPORT_DIR}/security-check.txt"
    
    # Âç±Èô∫„Å™„Éë„Çø„Éº„É≥„ÉÅ„Çß„ÉÉ„ÇØ
    grep -n "ADD\|COPY.*--chown" Dockerfile >> "${SCAN_REPORT_DIR}/security-check.txt" || echo "No chown operations found" >> "${SCAN_REPORT_DIR}/security-check.txt"
    grep -n "USER" Dockerfile >> "${SCAN_REPORT_DIR}/security-check.txt" || echo "No USER directive found" >> "${SCAN_REPORT_DIR}/security-check.txt"
    grep -n "HEALTHCHECK" Dockerfile >> "${SCAN_REPORT_DIR}/security-check.txt" || echo "No HEALTHCHECK found" >> "${SCAN_REPORT_DIR}/security-check.txt"
fi

# 4. ‰æùÂ≠òÈñ¢‰øÇ„ÅÆËÑÜÂº±ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ (package.json)
if [ -f "package.json" ]; then
    echo "üîç Checking npm dependencies for vulnerabilities..."
    npm audit --audit-level moderate > "${SCAN_REPORT_DIR}/npm-audit.txt" 2>&1 || echo "‚ö†Ô∏è  npm audit completed with warnings"
fi

# 5. „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆöÊ§úË®º
echo "üîç Verifying security configurations..."

# docker-compose.yml „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆöÁ¢∫Ë™ç
if [ -f "docker-compose.yml" ]; then
    echo "" >> "${SCAN_REPORT_DIR}/security-check.txt"
    echo "Docker Compose Security Settings:" >> "${SCAN_REPORT_DIR}/security-check.txt"
    echo "--------------------------------" >> "${SCAN_REPORT_DIR}/security-check.txt"
    
    grep -n "no-new-privileges\|read_only\|cap_drop\|security_opt" docker-compose.yml >> "${SCAN_REPORT_DIR}/security-check.txt" || echo "Basic security settings may be missing" >> "${SCAN_REPORT_DIR}/security-check.txt"
fi

echo "‚úÖ Security scan completed!"
echo "üìÑ Reports saved to: ${SCAN_REPORT_DIR}/"
echo ""
echo "üìã Summary:"
echo "- Image inspection: ${SCAN_REPORT_DIR}/image-inspect.json"
echo "- Security check: ${SCAN_REPORT_DIR}/security-check.txt"
echo "- npm audit: ${SCAN_REPORT_DIR}/npm-audit.txt"

if [ -f "${SCAN_REPORT_DIR}/trivy-scan.txt" ]; then
    echo "- Trivy scan: ${SCAN_REPORT_DIR}/trivy-scan.txt"
fi

if [ -f "${SCAN_REPORT_DIR}/docker-scout-cves.txt" ]; then
    echo "- Docker Scout CVEs: ${SCAN_REPORT_DIR}/docker-scout-cves.txt"
fi

echo ""
echo "üîê Please review the security reports before deploying to production!" 