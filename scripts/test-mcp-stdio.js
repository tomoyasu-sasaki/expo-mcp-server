#!/usr/bin/env node

/**
 * MCP Protocol stdioÈÄö‰ø°„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà
 * JSON-RPC 2.0 „É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÈÄÅÂèó‰ø°Á¢∫Ë™ç
 */

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const serverPath = join(__dirname, '../dist/index.js');

console.log('üß™ MCP Protocol stdio ÈÄö‰ø°„ÉÜ„Çπ„ÉàÈñãÂßã...');

// MCP Server „Éó„É≠„Çª„Çπ„ÇíËµ∑Âãï
const server = spawn('node', [serverPath, '--stdio', '--debug'], {
  stdio: ['pipe', 'pipe', 'pipe'],
});

let messageId = 1;
let responses = [];

// „Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø°
server.stdout.on('data', (data) => {
  const lines = data.toString().trim().split('\n');
  lines.forEach(line => {
    if (line.trim()) {
      try {
        const response = JSON.parse(line);
        console.log('üì• Received:', JSON.stringify(response, null, 2));
        responses.push(response);
        
        // initialize„Å´ÂØæ„Åô„Çã„É¨„Çπ„Éù„É≥„Çπ„ÇíÂèó‰ø°„Åó„Åü„Çâ„ÄÅtools/list„ÇíÈÄÅ‰ø°
        if (response.id === 1 && !response.error) {
          sendToolsList();
        }
        
        // tools/list„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„ÇíÂèó‰ø°„Åó„Åü„Çâ„ÄÅ„ÉÜ„Çπ„ÉàÂÆå‰∫Ü
        if (response.id === 2 && !response.error) {
          console.log('‚úÖ Tools list received successfully');
          setTimeout(() => {
            server.kill();
            console.log('üéØ „ÉÜ„Çπ„ÉàÂÆå‰∫Ü');
          }, 1000);
        }
      } catch (error) {
        console.log('üìù Non-JSON output:', line);
      }
    }
  });
});

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
server.stderr.on('data', (data) => {
  console.log('‚ö†Ô∏è  Server stderr:', data.toString());
});

server.on('close', (code) => {
  console.log(`üìä Server process exited with code ${code}`);
  
  // „ÉÜ„Çπ„ÉàÁµêÊûú„Åæ„Å®„ÇÅ
  console.log('\nüìã „ÉÜ„Çπ„ÉàÁµêÊûú:');
  console.log(`- Âèó‰ø°„É°„ÉÉ„Çª„Éº„Ç∏Êï∞: ${responses.length}`);
  
  const initResponse = responses.find(r => r.id === 1);
  const toolsResponse = responses.find(r => r.id === 2);
  
  if (initResponse && !initResponse.error) {
    console.log('‚úÖ Initialize: ÊàêÂäü');
  } else {
    console.log('‚ùå Initialize: Â§±Êïó');
  }
  
  if (toolsResponse && !toolsResponse.error) {
    console.log('‚úÖ Tools list: ÊàêÂäü');
    console.log(`   Âà©Áî®ÂèØËÉΩ„ÉÑ„Éº„É´Êï∞: ${toolsResponse.result?.tools?.length || 0}`);
  } else {
    console.log('‚ùå Tools list: Â§±Êïó');
  }
  
  process.exit(code);
});

// Initialize „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
function sendInitialize() {
  const initMessage = {
    jsonrpc: '2.0',
    id: messageId++,
    method: 'initialize',
    params: {
      protocolVersion: '2024-11-05',
      capabilities: {
        roots: {
          listChanged: true,
        },
      },
      clientInfo: {
        name: 'expo-mcp-test-client',
        version: '1.0.0',
      },
    },
  };
  
  console.log('üì§ Sending initialize:', JSON.stringify(initMessage, null, 2));
  server.stdin.write(JSON.stringify(initMessage) + '\n');
}

// Tools list „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
function sendToolsList() {
  const toolsMessage = {
    jsonrpc: '2.0',
    id: messageId++,
    method: 'tools/list',
    params: {},
  };
  
  console.log('üì§ Sending tools/list:', JSON.stringify(toolsMessage, null, 2));
  server.stdin.write(JSON.stringify(toolsMessage) + '\n');
}

// „Çµ„Éº„Éê„ÉºËµ∑ÂãïÂæÖÊ©üÂæå„Å´„ÉÜ„Çπ„ÉàÈñãÂßã
setTimeout(() => {
  console.log('‚è±Ô∏è  Server startup wait completed, sending initialize...');
  sendInitialize();
}, 2000);

// „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆöÔºà30ÁßíÔºâ
setTimeout(() => {
  console.log('‚è∞ Test timeout reached');
  server.kill();
  process.exit(1);
}, 30000); 