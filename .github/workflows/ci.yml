name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1' # Weekly security scan

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: expo/mcp-server

jobs:
  # =========================
  # 🧪 Testing & Quality Assurance
  # =========================
  test:
    name: "🧪 Test Suite"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20', '22']
    
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        
      - name: "🏗️ Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: "📦 Install dependencies"
        run: npm ci
        
      - name: "🔍 Type checking"
        run: npm run type-check
        
      - name: "🎨 Lint check"
        run: npm run lint
        
      - name: "🧪 Run tests"
        run: |
          echo "🧪 Running fast test suite to avoid timeout issues..."
          npm run test:fast 2>&1 | tee test-results.log || {
            echo "❌ Tests failed. Detailed error analysis:"
            echo "=== Failed Tests Summary ==="
            grep -A 5 -B 5 "FAIL\|Error:" test-results.log || echo "No specific error patterns found"
            echo "=== Configuration Issues ==="
            grep -A 10 "Configuration validation failed" test-results.log || echo "No configuration errors found"
            echo "=== Redis Connection Issues ==="
            grep -A 5 "ECONNREFUSED.*6380" test-results.log || echo "No Redis connection errors found"
            echo "=== Open Handles Issues ==="
            grep -A 10 "open handles" test-results.log || echo "No open handles detected"
            exit 1
          }
        
      - name: "📊 Upload coverage to Codecov"
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # =========================  
  # 🔐 Security Scanning
  # =========================
  security:
    name: "🔐 Security Scan"
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        
      - name: "🏗️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: "📦 Install dependencies"
        run: npm ci
        
      - name: "🔍 NPM Audit"
        run: |
          echo "🔍 Running NPM Security Audit..."
          npm audit --audit-level=high --json > npm-audit-results.json || AUDIT_EXIT_CODE=$?
          
          if [ -s npm-audit-results.json ]; then
            echo "📊 Audit Results Summary:"
            cat npm-audit-results.json | jq -r '.metadata.vulnerabilities | "Critical: \(.critical), High: \(.high), Moderate: \(.moderate), Low: \(.low)"'
            
            # Check for critical/high vulnerabilities only
            CRITICAL_HIGH=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities.critical + .metadata.vulnerabilities.high')
            if [ "$CRITICAL_HIGH" -gt 0 ]; then
              echo "❌ Critical or High severity vulnerabilities found!"
              npm audit --audit-level=high
              exit 1
            else
              echo "✅ No critical or high severity vulnerabilities found"
              echo "ℹ️ Moderate vulnerabilities are documented and acceptable"
            fi
          else
            echo "✅ No vulnerabilities found"
          fi
        continue-on-error: false
        
      - name: "🔒 CodeQL Analysis"
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: "📊 Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        
      - name: "🔐 Trivy vulnerability scanner"
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: "📤 Upload Trivy scan results"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-security-scan'

  # =========================
  # 🏗️ Build & Package
  # =========================
  build:
    name: "🏗️ Build Package"
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        
      - name: "🏗️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: "📦 Install dependencies"
        run: npm ci
        
      - name: "🏗️ Build project"
        run: npm run build
        
      - name: "📦 Test packaging"
        run: |
          npm pack --dry-run
          echo "✅ Package validation completed"
        
      - name: "💾 Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            README.md
          retention-days: 30

  # =========================
  # 🔧 Binary Build (Multi-platform)
  # =========================
  binary:
    name: "🔧 Binary Build"
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        
      - name: "🏗️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: "📦 Install dependencies"
        run: npm ci
        
      - name: "🔧 Build binaries"
        run: npm run binary:build
        
      - name: "🧪 Test binaries"
        run: |
          # Test Linux binary
          if [ -f binaries/expo-mcp-server-linux-x64 ]; then
            timeout 5s ./binaries/expo-mcp-server-linux-x64 --help || echo "Linux binary test completed"
          fi
          
          # List binary files for debugging
          echo "Available binaries:"
          ls -la binaries/ || echo "No binaries directory found"
          
      - name: "📦 Package binaries"
        run: npm run binary:compress
        
      - name: "💾 Upload binary artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: binary-artifacts
          path: binaries/
          retention-days: 30

  # =========================
  # 🐳 Docker Build & Security
  # =========================
  docker:
    name: "🐳 Docker Build"
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        
      - name: "🏗️ Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3
        
      - name: "🔐 Log in to Container Registry"
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "🏷️ Extract metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: "🏗️ Build Docker image"
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: "🔒 Run Trivy vulnerability scanner"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          
      - name: "📤 Upload Docker scan results"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-docker-results.sarif'
          category: 'trivy-docker-security'

  # =========================
  # 🧪 Integration Testing
  # =========================
  integration:
    name: "🧪 Integration Tests"
    runs-on: ubuntu-latest
    needs: [build]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        
      - name: "🏗️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: "📦 Install dependencies"
        run: npm ci
        
      - name: "💾 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .
          
      - name: "🧪 Run integration tests"
        run: |
          npm run test:integration
          npm run test:e2e
        env:
          REDIS_URL: redis://localhost:6379
          
      - name: "🐳 Test Docker build"
        run: |
          # Test Docker build process
          docker build -t expo-mcp-integration-test:latest .
          echo "Docker build test completed successfully"

  # =========================
  # 🚀 Release & Deploy
  # =========================
  release:
    name: "🚀 Release"
    runs-on: ubuntu-latest
    needs: [integration, binary]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        
      - name: "🏗️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: "📦 Install dependencies"
        run: npm ci
        
      - name: "💾 Download artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .
          
      - name: "💾 Download binary artifacts"
        uses: actions/download-artifact@v4
        with:
          name: binary-artifacts
          path: binaries/
          
      - name: "📤 Publish to NPM"
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: "🏷️ Create GitHub Release"
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### 📦 Installation
            ```bash
            npm install -g expo-mcp-server
            ```
            
            ### 🐳 Docker
            ```bash
            docker run -it ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### 📥 Binary Downloads
            - [Linux x64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/expo-mcp-server-linux-x64)
            - [macOS x64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/expo-mcp-server-macos-x64)
            - [macOS ARM64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/expo-mcp-server-macos-arm64)
            - [Windows x64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/expo-mcp-server-win-x64.exe)
          draft: false
          prerelease: false
          
      - name: "📤 Upload binary assets"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/expo-mcp-server-binaries.tar.gz
          asset_name: expo-mcp-server-binaries.tar.gz
          asset_content_type: application/gzip

  # =========================
  # 📊 Monitoring & Notifications
  # =========================
  notify:
    name: "📊 Notify"
    runs-on: ubuntu-latest
    needs: [test, security, build, binary, docker, integration]
    if: always()
    
    steps:
      - name: "📊 Report Status"
        run: |
          echo "🔍 Job Status Report:"
          echo "- Test: ${{ needs.test.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Binary: ${{ needs.binary.result }}"
          echo "- Docker: ${{ needs.docker.result }}"
          echo "- Integration: ${{ needs.integration.result }}"
          
          # Check if any critical jobs failed
          if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Critical jobs failed. Please review the logs."
            exit 1
          elif [[ "${{ needs.integration.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ All essential checks passed successfully!"
          else
            echo "⚠️ Some non-critical checks had issues, but build is functional."
          fi 